package main

import (
	"fmt"
	"image"
	_ "image/png"
	"log"

	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
)

const (
	screenWidth  = 640
	screenHeight = 480
)

const (
	tileSize = 16
	tileXNum = 32
)

var (
	tilesImage *ebiten.Image
)

func init() {
	img, _, err := ebitenutil.NewImageFromFile("assets/images/tilea2.png")
	if err != nil {
		log.Fatal(err)
	}
	tilesImage = img
}

type Game struct {
	layers [][]int
}

func (g *Game) Update() error {
	return nil
}

func (g *Game) Draw(screen *ebiten.Image) {
	const xNum = screenWidth / tileSize
	for _, l := range g.layers {
		for i, t := range l {
			op := &ebiten.DrawImageOptions{}
			op.GeoM.Translate(float64((i%xNum)*tileSize), float64((i/xNum)*tileSize))

			sx := (t % tileXNum) * tileSize
			sy := (t / tileXNum) * tileSize
			screen.DrawImage(tilesImage.SubImage(image.Rect(sx, sy, sx+tileSize, sy+tileSize)).(*ebiten.Image), op)
		}
	}

	ebitenutil.DebugPrint(screen, fmt.Sprintf("TPS: %0.2f", ebiten.CurrentTPS()))
}

func (g *Game) Layout(outsideWidth, outsideHeight int) (int, int) {
	return screenWidth, screenHeight
}

func main() {
	g := &Game{
		layers: [][]int{
			{},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 104, 0, 0, 101, 102, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 103, 104, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 73, 74, 75, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 105, 106, 107, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 137, 138, 139, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 169, 170, 171, 172, 0, 0, 0, 0, 0, 0, 0, 269, 270, 271, 270, 271, 270, 271, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 334, 335, 334, 335, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 302, 303, 302, 303, 302, 303, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 74, 75, 76, 301, 334, 335, 334, 335, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 106, 107, 108, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 138, 139, 140, 301, 334, 335, 334, 335, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169, 170, 171, 172, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 334, 335, 334, 335, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 334, 335, 334, 335, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 334, 335, 302, 303, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 302, 303, 302, 303, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 302, 303, 302, 303, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261, 262, 263, 264, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 302, 303, 302, 303, 334, 335, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 294, 295, 296, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 335, 334, 335, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 326, 327, 328, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 366, 367, 302, 303, 366, 367, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 357, 358, 359, 360, 101, 136, 0, 0, 101, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 136, 0, 0, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 136, 333, 304, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 136, 0, 0, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 168, 333, 336, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 168, 0},
		},
	}

	ebiten.SetWindowSize(screenWidth*2, screenHeight*2)
	ebiten.SetWindowTitle("golang 2d test")
	if err := ebiten.RunGame(g); err != nil {
		log.Fatal(err)
	}
}
